export * from '@sinclair/typebox';
export * from 'fastify';
import { Static, TSchema, TUnknown } from '@sinclair/typebox';
import { FastifyServerFactory, FastifyServerOptions, RawServerDefault, FastifyPluginOptions, FastifyPluginCallback, RawServerBase, FastifyRequest, FastifyReply, RouteShorthandOptions, FastifyInstance, RawRequestDefaultExpression, RawReplyDefaultExpression, FastifyRegisterOptions } from 'fastify';
export declare type FastifyTypeBoxSchema = {
    body?: TSchema;
    headers?: TSchema;
    querystring?: TSchema;
    response?: {
        [statusCode: number]: TSchema;
    };
};
export declare type IntoFastifySchema<Url extends string, T extends FastifyTypeBoxSchema> = {
    Body: T['body'] extends TSchema ? Static<T['body']> : unknown;
    Headers: T['headers'] extends TSchema ? Static<T['headers']> : unknown;
    Querystring: T['querystring'] extends TSchema ? Static<T['querystring']> : unknown;
    Params: FastifyTypeBoxParseParams<Url>;
};
export declare type FastifyTypeBoxRequest<Server extends RawServerBase, Schema extends FastifyTypeBoxSchema, Url extends string> = FastifyRequest<IntoFastifySchema<Url, Schema>, Server, RawRequestDefaultExpression<Server>>;
export declare type FastifyTypeBoxResolvedReply<Schema extends TSchema> = Omit<FastifyReply, 'status' | 'send'> & {
    status(status: number): FastifyTypeBoxResolvedReply<Schema>;
    send(response: Static<Schema>): void;
};
export declare type FastifyTypeBoxUnresolvedReply<Schema extends {
    [status: string]: TSchema;
}> = Omit<FastifyReply, 'status' | 'send'> & {
    /** You must call status() before calling send() */
    send(response: never): void;
    status<Status extends keyof Schema>(code: Status): FastifyTypeBoxResolvedReply<Schema[Status]>;
};
export declare type FastifyTypeBoxReply<Schema extends FastifyTypeBoxSchema> = Schema['response'] extends {
    [status: number]: TSchema;
} ? FastifyTypeBoxUnresolvedReply<Schema['response']> : FastifyTypeBoxResolvedReply<TUnknown>;
export declare type FastifyTypeBoxRouteShorthandOptions<Server extends RawServerBase, Config> = Omit<RouteShorthandOptions<Server, RawRequestDefaultExpression<Server>, RawReplyDefaultExpression<Server>, never, Config>, 'schema'>;
export declare type FastifyTypeBoxRouteOptions<Server extends RawServerBase, Schema extends FastifyTypeBoxSchema, Config> = FastifyTypeBoxRouteShorthandOptions<Server, Config> & {
    schema?: Schema;
};
export declare type FastifyTypeBoxHandlerMethod<Server extends RawServerBase, Schema extends FastifyTypeBoxSchema, Url extends string> = (request: FastifyTypeBoxRequest<Server, Schema, Url>, reply: FastifyTypeBoxReply<Schema>) => Promise<unknown> | unknown;
export declare type FastifyTypeBoxRouteGenericInterface<Server extends RawServerBase, Schema extends FastifyTypeBoxSchema, Url extends string> = FastifyTypeBoxRouteOptions<Server, Schema, any> & {
    method: string;
    url: string;
    handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>;
};
export declare type FastifyTypeBoxPluginCallback<Options extends Record<never, never>, Server extends RawServerBase> = (instance: FastifyTypeBoxInstance<Server>, opts: Options, done: (err?: Error) => void) => unknown | Promise<unknown>;
export declare type FastifyTypeBoxPluginCallbackVariant<Options extends FastifyServerOptions, Server extends RawServerBase> = FastifyTypeBoxPluginCallback<Options, Server> | FastifyPluginCallback<Options, Server>;
export declare type FastifyTypeBoxInstance<Server extends RawServerBase = RawServerDefault> = Omit<FastifyInstance, 'register' | 'route' | 'all' | 'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put'> & {
    register<Options extends FastifyPluginOptions>(plugin: FastifyTypeBoxPluginCallbackVariant<Options, Server>, opts?: FastifyRegisterOptions<Options> | undefined): FastifyTypeBoxInstance;
    route<Url extends string, Schema extends FastifyTypeBoxSchema>(options: FastifyTypeBoxRouteGenericInterface<Server, Schema, Url>): FastifyTypeBoxInstance;
    all<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    all<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    delete<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    delete<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    get<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    get<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    head<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    head<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    options<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    options<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    patch<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    patch<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    post<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    post<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
    put<Url extends string>(url: Url, handler: FastifyTypeBoxHandlerMethod<Server, {}, Url>): FastifyTypeBoxInstance;
    put<Url extends string, Schema extends FastifyTypeBoxSchema>(url: Url, options: FastifyTypeBoxRouteOptions<Server, Schema, any>, handler: FastifyTypeBoxHandlerMethod<Server, Schema, Url>): FastifyTypeBoxInstance;
};
export declare type InferServerFromFactory<T> = T extends FastifyServerFactory<infer Server> ? Server : RawServerDefault;
export declare type InferServerFromOptions<T> = T extends FastifyServerOptions ? InferServerFromFactory<T['serverFactory']> : RawServerDefault;
export default function Fastify<Options extends FastifyServerOptions, Server extends RawServerBase = InferServerFromOptions<Options>>(options?: Options): FastifyTypeBoxInstance<Server>;
export declare type FastifyTypeBoxExtractParams<S extends string, Params extends string[]> = S extends `/${infer R}` ? FastifyTypeBoxExtractParams<R, Params> : S extends `:${infer P}/${infer R}` ? FastifyTypeBoxExtractParams<R, [...Params, P]> : S extends `:${infer P}` ? [...Params, P] : S extends `${infer _}/${infer R}` ? FastifyTypeBoxExtractParams<R, Params> : Params;
export declare type FastifyTypeBoxUnionParameters<T extends string[]> = {
    [K in keyof T]: T[K];
}[number];
export declare type FastifyTypeBoxIntoParamsObject<T extends string> = {
    [K in T]: string;
};
export declare type FastifyTypeBoxParseParams<S extends string> = FastifyTypeBoxIntoParamsObject<FastifyTypeBoxUnionParameters<FastifyTypeBoxExtractParams<S, []>>>;
